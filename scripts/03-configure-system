#!/bin/bash

set -euo pipefail

# Users and groups
useradd -mG wheel "$USERNAME"
echo "$USERNAME:$PASSWORD" | chpasswd

# Enable color, verbose package lists, parallel downloads and multilib repository in pacman.conf
sed -i 's/^#Color/Color/' /etc/pacman.conf
sed -i 's/^#VerbosePkgLists/VerbosePkgLists/' /etc/pacman.conf
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
sed -i '/^#\[multilib\]$/{s/^#//;n;s/^#//}' /etc/pacman.conf

# Install packages
pacman -S --needed --noconfirm - < "$UTILS"/packages.txt
pacman -S --needed --noconfirm --asdeps - < "$UTILS"/packages-deps.txt
if [[ $LAPTOP = 'yes' ]]; then
    pacman -S --needed --noconfirm - < "$UTILS"/packages-laptop.txt
fi
if [[ $NVIDIA = 'yes' ]]; then
    pacman -S --needed --noconfirm nvidia
else
    pacman -S --needed --noconfirm mesa libva-mesa-driver
fi

# Enable parallel compilation in makepkg.conf
sed -i 's/^#MAKEFLAGS=.*/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf

# Disable debug option in makepkg.conf
sed -i '/^OPTIONS=/s/debug/!debug/' /etc/makepkg.conf

# Install yay
git clone https://aur.archlinux.org/yay-bin.git
chown -R "$USERNAME":"$USERNAME" yay-bin
cd yay-bin
sudo -u "$USERNAME" makepkg -sirc --noconfirm
cd ..
rm -rf yay-bin

# Install AUR packages
sudo -u "$USERNAME" yay -S --noconfirm - < "$UTILS"/packages-aur.txt

# Time zone
ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
hwclock --systohc

# Localization
sed -i 's/#en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen
sed -i 's/#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
locale-gen
echo 'LANG=en_GB.UTF-8' > /etc/locale.conf
echo 'KEYMAP=uk' > /etc/vconsole.conf

# Network configuration
echo "$HOSTNAME" > /etc/hostname
systemctl enable NetworkManager.service

# Initramfs

# Root password
echo "root:$PASSWORD" | chpasswd

# Boot loader
UUID=$(blkid "$ROOT_PARTITION" --match-tag UUID -o value)
bootctl install
cp "$UTILS"/loader.conf "$ESP"/loader/loader.conf
sed "s/uuid/$UUID/" "$UTILS"/arch.conf > "$ESP"/loader/entries/arch.conf
systemctl enable systemd-boot-update.service

# Plymouth
sed -i '/^HOOKS=/s/)/ plymouth)/' /etc/mkinitcpio.conf

# Add mkinitcpio hook if installing on lvm
if grep -q '/dev/mapper/' <<< "$ROOT_PARTITION"; then
    pacman -S --noconfirm lvm2
    sed -i '/^HOOKS=/s/block /block lvm2 /' /etc/mkinitcpio.conf
fi

# Nvidia setup
if [[ $NVIDIA = 'yes' ]]; then
    sed -i '/^options/s/$/ nvidia_drm.modeset=1 nvidia_drm.fbdev=1/' "$ESP"/loader/entries/arch.conf
    sed -i '/^HOOKS=/s/\( *\)kms */\1/' /etc/mkinitcpio.conf
    # Enable early KMS
    sed -i '/^MODULES=/s/()/(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
    mkdir -p /etc/pacman.d/hooks
    cp "$UTILS"/nvidia.hook /etc/pacman.d/hooks/nvidia.hook
    # Preserve video memory after suspend
    cp "$UTILS"/nvidia-power-management.conf /etc/modprobe.d/nvidia-power-management.conf
    systemctl enable nvidia-suspend.service
    systemctl enable nvidia-resume.service
    # Disable HDMI audio output
    mkdir -p /etc/wireplumber/wireplumber.conf.d
    cp "$UTILS"/51-alsa-disable.conf /etc/wireplumber/wireplumber.conf.d/51-alsa-disable.conf
fi

# Re-generate initramfs
mkinitcpio -P

# Create swapfile
if [[ $SWAP_SIZE -ne 0 ]]; then
    dd if=/dev/zero of=/swapfile bs=1M count="${SWAP_SIZE}k" status=progress
    chmod 0600 /swapfile
    mkswap -U clear /swapfile
    swapon /swapfile
    echo '/swapfile none swap defaults 0 0' >> /etc/fstab
fi

# Laptop setup
if [[ $LAPTOP = 'yes' ]]; then
    # Enable tlp
    systemctl enable tlp.service
    systemctl mask systemd-rfkill.service
    systemctl mask systemd-rfkill.socket
    systemctl enable NetworkManager-dispatcher.service

    # Add user to video group and allow to change the brightness
    usermod -aG video "$USERNAME"
    cp "$UTILS"/backlight.rules /etc/udev/rules.d/backlight.rules

    # Ignore lid close when using external monitor
    sed -i 's/#HandleLidSwitchDocked=.*/HandleLidSwitchDocked=ignore/' /etc/systemd/logind.conf
fi

# Desktop setup
HDD_UUID='ea862cc9-c5b3-4c8a-a07b-ece92b9a649a'
if grep -q "$HDD_UUID" <<< "$(ls /dev/disk/by-uuid)"; then
    mkdir -p "$HDD_MNT"
    chown "$USER":"$USER" "$HDD_MNT"
    chmod 700 "$HDD_MNT"
    echo "UUID=$HDD_UUID $HDD_MNT ext4 defaults 0 2" >> /etc/fstab
    mount "$HDD_MNT"
fi

# Firewalls (ufw)
ufw default deny incoming
ufw default allow outgoing
sed -i 's/^ENABLED=.*/ENABLED=yes/' /etc/ufw/ufw.conf
systemctl enable ufw.service

# Syncthing
#ufw allow syncthing
install "$UTILS"/manage-syncthing /etc/NetworkManager/dispatcher.d/pre-up.d/

# KMonad
mkdir /etc/kmonad
KBD_PATH="$($UTILS/kmonad-select-keyboard)"
# escape forward slashes in keyboard path for use in next sed command
KBD_PATH="$(sed 's/\//\\\//g' <<< "$KBD_PATH")"
sed "s/KBD_PATH/$KBD_PATH/" "$UTILS"/kmonad.kbd > /etc/kmonad/kmonad.kbd
cp "$UTILS"/kmonad.service /etc/systemd/system/kmonad.service
systemctl enable kmonad.service

# Enable automtic trim
systemctl enable fstrim.timer

# Enable systemd-timesync
systemctl enable systemd-timesyncd.service
# Automatic timezone?

# Configure and enable reflector.timer
mv /etc/xdg/reflector/reflector.conf /etc/xdg/reflector/reflector.conf.backup
cp "$UTILS"/reflector.conf etc/xdg/reflector/reflector.conf
systemctl enable reflector.timer

# Enable paccache.timer
systemctl enable paccache.timer

# Enable man-db timer
systemctl enable man-db.timer

# Disable PC Speaker
cp "$UTILS"/nobeep.conf /etc/modprobe.d/nobeep.conf

# Power button suspends
sed -i 's/#HandlePowerKey=.*/HandlePowerKey=suspend/' /etc/systemd/logind.conf

# Suspend after idle in tty
sed -i 's/#IdleAction=.*/IdleAction=suspend/' /etc/systemd/logind.conf
sed -i 's/#IdleActionSec=.*/IdleActionSec=5min/' /etc/systemd/logind.conf

# Prompt only the password for login on tty1
mkdir -p /etc/systemd/system/getty@tty1.service.d
sed "s/USERNAME/$USERNAME/" "$UTILS"/skip-username.conf > /etc/systemd/system/getty@tty1.service.d/skip-username.conf
mkdir -p /etc/systemd/system/getty@.service.d
cp "$UTILS"/activate-numlock.conf /etc/systemd/system/getty@.service.d/activate-numlock.conf
systemctl enable getty@tty1

# Enable bluetooth
systemctl enable bluetooth.service
# Don't automatically start bluetooth
sed -i 's/^AutoEnable=.*/AutoEnable=false/' /etc/bluetooth/main.conf

# Automatically unlock login keyring
perl -gpi -e 's/(.*auth[^\n]*)/$1\nauth       optional     pam_gnome_keyring.so/s' /etc/pam.d/login
perl -gpi -e 's/(.*session[^\n]*)/$1\nsession    optional     pam_gnome_keyring.so auto_start/s' /etc/pam.d/login
# Automatically change keyring password with user password
echo "password	optional	pam_gnome_keyring.so" >> /etc/pam.d/passwd

# Spotify remove banner
"$SCRIPTS"/spotify-remove-banner

# Sway setup
pacman -S --needed --noconfirm - < "$UTILS"/packages-sway.txt
sudo -u "$USERNAME" yay -S --noconfirm - < "$UTILS"/packages-sway-aur.txt
if [[ $NVIDIA = 'yes' ]]; then
    install "$UTILS"/start-sway-nvidia /usr/local/bin/start-sway
else
    install "$UTILS"/start-sway /usr/local/bin/start-sway
fi

cp "$UTILS"/environment /etc/environment
